name: Release Build

on:
  release:
    types: [published]
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: mcp-bridge-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin_name: mcp-bridge-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_name: mcp-bridge-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_name: mcp-bridge-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: mcp-bridge-windows-x86_64.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # 安装平台特定的构建依赖
      - name: Install build dependencies
        run: |
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu)
              sudo apt-get update
              sudo apt-get install -y libssl-dev pkg-config
              ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu libssl-dev:arm64
              # 设置交叉编译环境变量
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
              ;;
            *-apple-darwin)
              # macOS 通常已包含 OpenSSL
              brew update
              brew install openssl
              ;;
            *-pc-windows-msvc)
              # Windows 使用预编译的 OpenSSL
              ;;
          esac

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          # 设置 OpenSSL 目录 (macOS 需要)
          OPENSSL_DIR: ${{ matrix.target == 'x86_64-apple-darwin' || matrix.target == 'aarch64-apple-darwin' && '/usr/local/opt/openssl' || '' }}
          OPENSSL_STATIC: 1

      - name: Prepare release package
        run: |
          # 创建平台特定的目录
          mkdir -p release-package
          
          # 复制二进制文件
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/mcp-bridge.exe "release-package/${{ matrix.bin_name }}"
          else
            cp target/${{ matrix.target }}/release/mcp-bridge "release-package/${{ matrix.bin_name }}"
          fi

          # 复制其他文件
          cp conf/config.yaml release-package/
          cp conf/mcp_tools.json release-package/
          cp README.md release-package/
          
          # 创建压缩包
          tar -czf ${{ matrix.bin_name }}.tar.gz -C release-package .

          # 清理临时目录
          rm -rf release-package

          # 验证压缩包内容
          tar -ztvf ${{ matrix.bin_name }}.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bin_name }}.tar.gz
          path: ${{ matrix.bin_name }}.tar.gz

  create-release:
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          # 移动所有压缩包到根目录
          find artifacts -name '*.tar.gz' -exec mv {} . \;
          
          # 列出所有准备上传的文件
          ls -lh *.tar.gz

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            mcp-bridge-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
