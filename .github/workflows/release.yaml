name: Release Build

on:
  release:
    types: [published]
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: mcp-bridge-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin_name: mcp-bridge-linux-aarch64
            use_docker: true  # 添加 Docker 构建标志
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_name: mcp-bridge-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_name: mcp-bridge-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: mcp-bridge-windows-x86_64.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker for ARM64 builds
        if: matrix.use_docker == true
        run: |
          # 1. 卸载冲突的 containerd
          sudo apt-get remove -y containerd || true
          
          # 2. 安装必要依赖
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl
          
          # 3. 添加 Docker 官方 GPG 密钥
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          
          # 4. 添加 Docker 仓库
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          
          # 5. 安装 Docker
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          
          # 6. 测试 Docker
          sudo docker run --rm hello-world
          
      - name: Build with Cross (ARM64)
        if: matrix.use_docker == true
        run: |
          # 安装 cross 工具
          cargo install cross --git https://github.com/cross-rs/cross
          
          # 使用 cross 构建 ARM64 目标
          cross build --release --target aarch64-unknown-linux-gnu

      # 其他平台的 Rust 安装
      - name: Install Rust
        if: matrix.use_docker != true
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      # 仅 Linux x86_64 依赖安装（保持不变）
      - name: Install Linux x86_64 dependencies
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
          # 设置 OpenSSL 环境变量
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

      # 仅 macOS 依赖安装（保持不变）
      - name: Install macOS dependencies
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install openssl
          # 设置 OpenSSL 环境变量
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV

      # 非 Docker 平台的构建（保持不变）
      - name: Build release binary
        if: matrix.use_docker != true
        run: cargo build --release --target ${{ matrix.target }}
        env:
          OPENSSL_STATIC: 1
          # 为所有平台设置 OpenSSL 环境变量
          OPENSSL_DIR: ${{ env.OPENSSL_DIR || '' }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR || '' }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR || '' }}

      # 为 Windows 平台使用 PowerShell 脚本（保持不变）
      - name: Prepare release package (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # 创建平台特定的目录
          New-Item -ItemType Directory -Path release-package -Force | Out-Null

          # 复制文件 - 使用正确的构建路径
          $binaryPath = "target/$env:TARGET/release/mcp-bridge.exe"
          if (-not (Test-Path $binaryPath)) {
              # 尝试备用路径
              $binaryPath = "target/release/mcp-bridge.exe"
          }

          if (-not (Test-Path $binaryPath)) {
              Write-Error "Binary not found at $binaryPath"
              Get-ChildItem -Recurse -File -Path target | Where-Object { $_.Name -like "*mcp-bridge*" } | Format-List
              exit 1
          }

          Copy-Item $binaryPath "release-package/$env:BIN_NAME"
          Copy-Item conf/config.yaml release-package/
          Copy-Item conf/mcp_tools.json release-package/
          Copy-Item README.md release-package/

          # 创建压缩包
          tar -czf "$env:BIN_NAME.tar.gz" -C release-package .

          # 清理临时目录
          Remove-Item -Recurse -Force release-package

          # 验证压缩包内容
          tar -tvf "$env:BIN_NAME.tar.gz"

        env:
          TARGET: ${{ matrix.target }}
          BIN_NAME: ${{ matrix.bin_name }}

      # 为 Linux/macOS 平台使用 bash 脚本（保持不变）
      - name: Prepare release package (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # 创建平台特定的目录
          mkdir -p release-package

          # 复制文件
          cp "target/$TARGET/release/mcp-bridge" "release-package/$BIN_NAME"
          cp conf/config.yaml release-package/
          cp conf/mcp_tools.json release-package/
          cp README.md release-package/

          # 创建压缩包
          tar -czf "$BIN_NAME.tar.gz" -C release-package .

          # 清理临时目录
          rm -rf release-package

          # 验证压缩包内容
          tar -ztvf "$BIN_NAME.tar.gz"

        env:
          TARGET: ${{ matrix.target }}
          BIN_NAME: ${{ matrix.bin_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bin_name }}.tar.gz
          path: ${{ matrix.bin_name }}.tar.gz

  create-release:
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          # 移动所有压缩包到根目录
          find artifacts -name '*.tar.gz' -exec mv {} . \;
          
          # 列出所有准备上传的文件
          ls -lh *.tar.gz

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            mcp-bridge-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
