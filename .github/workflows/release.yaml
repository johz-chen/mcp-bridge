name: Release Build

on:
  release:
    types: [published]
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: mcp-bridge-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin_name: mcp-bridge-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_name: mcp-bridge-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_name: mcp-bridge-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: mcp-bridge-windows-x86_64.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # 安装 Linux aarch64 交叉编译依赖
      - name: Install cross-compilation dependencies (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_INCREMENTAL: 0

      - name: Rename binary
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/mcp-bridge.exe ${{ matrix.bin_name }}
          else
            cp target/${{ matrix.target }}/release/mcp-bridge ${{ matrix.bin_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bin_name }}
          path: ${{ matrix.bin_name }}

  create-release:
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release Assets
        run: |
          cd artifacts
          for f in *; do
            echo "Processing $f"
            mv "$f" "../${f}"
          done
          cd ..

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            mcp-bridge-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
